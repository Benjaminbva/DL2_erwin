Traceback (most recent call last):
  File "/home/aema/Desktop/DL2_erwin/./experiments/train_cosmology.py", line 198, in <module>
    fit(config, model, optimizer, scheduler, train_loader, valid_loader, test_loader, 100, 200)
  File "/home/aema/Desktop/DL2_erwin/training.py", line 127, in fit
    stat_dict = train_step(model, batch, optimizer, scheduler)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/aema/Desktop/DL2_erwin/training.py", line 59, in train_step
    stat_dict = model.training_step(batch)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/aema/Desktop/DL2_erwin/experiments/wrappers/cosmology_equi.py", line 45, in training_step
    return self.step(batch, "train")
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/aema/Desktop/DL2_erwin/experiments/wrappers/cosmology_equi.py", line 40, in step
    pred_mv, pred_s = self(batch["pos"], **batch)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/aema/Desktop/DL2_erwin/erwin/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/aema/Desktop/DL2_erwin/erwin/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/aema/Desktop/DL2_erwin/experiments/wrappers/cosmology_equi.py", line 33, in forward
    x_mv2, x_s2 = self.main_model(x_mv, node_positions, x_s = x_s,**kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/aema/Desktop/DL2_erwin/erwin/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/aema/Desktop/DL2_erwin/erwin/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/aema/Desktop/DL2_erwin/equi_erwin.py", line 543, in forward
    node = layer(node, self.ref_mv_global)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/aema/Desktop/DL2_erwin/erwin/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/aema/Desktop/DL2_erwin/erwin/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/aema/Desktop/DL2_erwin/equi_erwin.py", line 374, in forward
    node = blk(node, reference_mv)
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/aema/Desktop/DL2_erwin/erwin/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/aema/Desktop/DL2_erwin/erwin/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/aema/Desktop/DL2_erwin/equi_erwin.py", line 300, in forward
    mlp_out_mv, mlp_out_s = self.mlp(x_mv_norm, scalars=x_s_norm, reference_mv=reference_mv)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/aema/Desktop/DL2_erwin/erwin/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/aema/Desktop/DL2_erwin/erwin/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/aema/Desktop/DL2_erwin/gatr/layers/mlp/mlp.py", line 97, in forward
    mv, s = layer(mv, scalars=s, reference_mv=reference_mv)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/aema/Desktop/DL2_erwin/erwin/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/aema/Desktop/DL2_erwin/erwin/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/aema/Desktop/DL2_erwin/gatr/layers/mlp/geometric_bilinears.py", line 113, in forward
    join_outputs = equivariant_join(left, right, reference_mv)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/aema/Desktop/DL2_erwin/gatr/primitives/dual.py", line 190, in equivariant_join
    return efficient_equivariant_join(x, y, reference)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/aema/Desktop/DL2_erwin/gatr/primitives/dual.py", line 246, in efficient_equivariant_join
    return reference[..., [14]] * gatr_einsum("i j k , ... j, ... k -> ... i", kernel, x, y)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/aema/Desktop/DL2_erwin/gatr/utils/einsum.py", line 79, in gatr_einsum
    return _gatr_einsum(equation, *operands)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/aema/Desktop/DL2_erwin/gatr/utils/einsum.py", line 39, in _cached_einsum
    return _einsum_with_path(equation, *operands, path=path)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/aema/Desktop/DL2_erwin/gatr/utils/einsum.py", line 18, in _einsum_with_path
    return torch._VF.einsum(equation, operands, path=path)  # type: ignore[attr-defined]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 2.00 GiB. GPU 0 has a total capacity of 7.62 GiB of which 758.25 MiB is free. Including non-PyTorch memory, this process has 6.86 GiB memory in use. Of the allocated memory 5.03 GiB is allocated by PyTorch, and 1.68 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
